#ifndef ast_hpp
#define ast_hpp

#include "ast/ast_tree.hpp"
#include "ast/ast_translation_unit.hpp"
#include "ast_abstract_declarator.hpp"
#include "ast_additive_expression.hpp"
#include "ast_and_expression.hpp"
#include "ast_argument_expression_list.hpp"
#include "ast_assignment_expression.hpp"
#include "ast_cast_expression.hpp"
#include "ast_compound_statement.hpp"
#include "ast_conditional_expression.hpp"
#include "ast_constant_expression.hpp"
#include "ast_declaration_list.hpp"
#include "ast_declaration_specifiers.hpp"
#include "ast_declaration.hpp"
#include "ast_declarator.hpp"
#include "ast_direct_abstract_declarator.hpp"
#include "ast_direct_declarator.hpp"
#include "ast_enum_specifier.hpp"
#include "ast_enumeration_constant.hpp"
#include "ast_enumerator_list.hpp"
#include "ast_enumerator.hpp"
#include "ast_equality_expression.hpp"
#include "ast_exclusive_or_expression.hpp"
#include "ast_expression_statement.hpp"
#include "ast_expression.hpp"
#include "ast_external_declaration.hpp"
#include "ast_function_definition.hpp"
#include "ast_identifier_list.hpp"
#include "ast_inclusive_or_expression.hpp"
#include "ast_init_declarator_list.hpp"
#include "ast_init_declarator.hpp"
#include "ast_initialiser_list.hpp"
#include "ast_initialiser.hpp"
#include "ast_iteration_statement.hpp"
#include "ast_jump_statement.hpp"
#include "ast_labeled_statement.hpp"
#include "ast_logical_and_expression.hpp"
#include "ast_logical_or_expression.hpp"
#include "ast_multiplicative_expression.hpp"
#include "ast_operators.hpp"
#include "ast_parameter_declaration.hpp"
#include "ast_parameter_list.hpp"
#include "ast_parameter_type_list.hpp"
#include "ast_pointer.hpp"
#include "ast_postfix_expression.hpp"
#include "ast_primary_expression.hpp"
#include "ast_relational_expression.hpp"
#include "ast_selection_statement.hpp"
#include "ast_shift_expression.hpp"
#include "ast_specifier_qualifier_list.hpp"
#include "ast_statement_list.hpp"
#include "ast_statement.hpp"
#include "ast_storage_class_specifier.hpp"
#include "ast_struct_declaration_list.hpp"
#include "ast_struct_declaration.hpp"
#include "ast_struct_declarator_list.hpp"
#include "ast_struct_declarator.hpp"
#include "ast_struct_or_union_specifier.hpp"
#include "ast_translation_unit.hpp"
#include "ast_tree.hpp"
#include "ast_type_name.hpp"
#include "ast_type_qualifier_list.hpp"
#include "ast_type_qualifier.hpp"
#include "ast_type_specifier.hpp"
#include "ast_typedef_name.hpp"
#include "ast_unary_expression.hpp"

extern const Translation_unit *parseAST();

#endif
